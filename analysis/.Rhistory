gather(category, value, -date) %>%
filter(date >= ymd("2021-01-01")) %>%
ggplot(aes(x=date, y=value, col=category, group=category)) +
geom_line()  +
theme_minimal()+
theme(legend.position="top")
plot_uk_inf_hosp
be_vs_neighbouring <- data_by_country %>%
filter(country %in% c("Belgium", "Germany", "Netherlands", "France")) %>%
select(date, country_nl, category, sum_7d_pop) %>%
filter(date > ymd("2021-01-01")) %>%
filter(category == c("infected","deaths"))
inf_be_vs_neighbouring <- be_vs_neighbouring %>%
filter(category == "infected") %>%
filter(date < Sys.Date()- 3) %>%
ggplot(aes(x=date, y=sum_7d_pop, col=country_nl)) +
geom_line() +
labs(title="", subtitle="Besmettingen tijdens voorgaande 7 dagen per 100.000 inwoners") +
theme_minimal()
inf_be_vs_neighbouring
hosp_be_vs_neighbouring <- hosp_ecdc %>%
filter(date >= "2021-09-01") %>%
filter(country %in% c("Belgium", "Germany", "Netherlands","France", "Spain", "Italy", "United Kingdom")) %>%
filter(indicator %in% c("Weekly new hospital admissions per 100k")) %>%
filter(year == "2021") %>%
ggplot(aes(x=year_week, y=value, group=country, col=country)) +
geom_line() +
facet_wrap(~indicator, scales="free_y") +
theme_minimal() +
labs(title="", subtitle="Wekelijks aantal ziekenhuisopnames per 100.000 inwoners")
hosp_be_vs_neighbouring
## owid meta data
vacc_meta <- read.csv("../external-data/testing-data/public/data/vaccinations/locations.csv") %>%
select(location, vaccines, last_observation_date) %>%
mutate(country_nl = countrycode(location, origin = 'country.name.en', destination = 'cldr.name.nl', nomatch = "Andere"))
## owid vacc data
vacc_data <- read.csv("../external-data/testing-data/public/data/vaccinations/Vaccinations.csv") %>%
left_join(vacc_meta, by = "location") %>%
# mutate(total_vaccinations_per_hundred = total_vaccinations_per_hundred * ) %>%
mutate(date = as.Date(date))
population_data <- data_by_country %>%
distinct(iso3c, population)
vacc_data %>%
filter(location == "World") %>%
filter(date == max(date)) %>%
mutate(
total_vaccinations = round(total_vaccinations / 1000000000, 2),
people_fully_vaccinated = round(people_fully_vaccinated / 1000000000, 2)
)
people_vaccinated_per_country <- vacc_data %>%
group_by(location) %>%
filter(date == max(date)) %>%
ungroup() %>%
filter(!is.na(people_vaccinated_per_hundred)) %>%
left_join(population_data, by = c("iso_code" = "iso3c")) %>%
filter(population > 1000000) %>%
top_n(20, people_vaccinated_per_hundred)
people_vaccinated_per_country
people_vaccinated_per_country %>%
ggplot(aes(x = reorder(location, people_vaccinated_per_hundred), y = people_vaccinated_per_hundred)) +
geom_col() +
coord_flip() +
labs(
x = ""
)
vacc_data %>%
left_join(population_data, by = c("iso_code" = "iso3c")) %>%
filter(population > 1000000) %>%
group_by(location) %>%
filter(date == max(date)) %>%
filter(!is.na(people_vaccinated_per_hundred)) %>%
mutate(country_nl = paste0(country_nl, "<br>","<span style=color:#a7a5a6;font-size:10px>Data tot ", last_observation_date, "</span>")) %>%
select(iso_code, country_nl, people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred, total_vaccinations, vaccines) %>%
arrange(country_nl) %>%
filter(!is.na(people_fully_vaccinated_per_hundred)) %>%
write_csv("../dist/csv/vaccines-by-country.csv")
vacc_data %>%
left_join(population_data, by = c("iso_code" = "iso3c")) %>%
filter(population > 1000000) %>%
group_by(location) %>%
filter(date == max(date)) %>%
filter(!is.na(people_vaccinated_per_hundred)) %>%
select(iso_code, country_nl, people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred, total_vaccinations, total_boosters, vaccines, population) %>%
arrange(country_nl) %>%
filter(!is.na(people_fully_vaccinated_per_hundred)) %>%
mutate(
continent = countrycode(iso_code, origin = 'iso3c', destination = 'continent', nomatch = "Andere"),
perc_boosted = total_boosters / population * 100,
perc_boosted = ifelse(is.na(perc_boosted), 0, perc_boosted)
) %>%
write_csv("../dist/csv/vaccines-by-country-2.csv")
vacc_data %>%
filter(location %in% c("Belgium","France","Germany","United States","Denmark")) %>%
select(location, date, people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred) %>%
gather("category","value", -location, -date) %>%
ggplot(aes(x = date, y = value, col = category)) +
geom_line() +
facet_wrap(~location) +
theme(legend.position = "top")
vacc_ra7 <-
vacc_data %>%
filter(location == "Belgium") %>%
select(date, daily_vaccinations_raw) %>%
mutate(daily_vaccinations_raw = ifelse(is.na(daily_vaccinations_raw), 0, daily_vaccinations_raw)) %>%
mutate(ra7_value_daily = runMean(daily_vaccinations_raw, 7)) %>%
select(date, ra7_value_daily)
vacc_data %>%
filter(location == "Belgium") %>%
select(date, people_vaccinated, people_fully_vaccinated) %>%
gather("category","value", -date) %>%
group_by(category) %>%
fill(value) %>%
mutate(value_daily = value - lag(value)) %>%
ungroup() %>%
left_join(vacc_ra7, by = "date") %>%
ggplot(aes(x = date, y = value_daily, fill = category)) +
geom_col(width = 0.9, alpha = 0.8) +
geom_line(aes(y = ra7_value_daily))
#hospitalisations  by Owid
curr_vac_rate <- vacc_data %>%
filter(location %in% eu28_countries) %>%
filter(!is.na(people_fully_vaccinated_per_hundred )) %>%
group_by(location) %>%
filter(date == max(date)) %>%
left_join(population_data, by = c("iso_code" = "iso3c")) %>%
mutate(perc_boosted = total_boosters / population * 100) %>%
select(location,date, people_fully_vaccinated_per_hundred, perc_boosted)
owid_hosp <- read.csv("../external-data/testing-data/public/data/hospitalizations/covid-hospitalizations.csv")
curr_hosp <- owid_hosp %>%
filter(indicator == "Weekly new hospital admissions per million") %>%
filter(entity %in% eu28_countries) %>%
group_by(entity) %>%
filter(date == max(date))
curr_inf <- data_by_country %>%
filter(category == "infected") %>%
filter(country %in% eu28_countries) %>%
select(country, date, sum_7d_pop) %>%
group_by(country) %>%
filter(date == max(date))
eu_comparisson <- curr_vac_rate %>%
left_join(curr_hosp, by=c("location"= "entity"))  %>%
left_join(curr_inf ,by=c("location"= "country"))
eu_comparisson %>%
ggplot(aes(x=perc_boosted, y=value, label=location)) +
geom_point() +
geom_text() +
#scale_x_log10() +
gghighlight(location == "Belgium") +
scale_y_log10() +
geom_vline(xintercept=median(eu_comparisson$perc_boosted, na.rm=T)) +
geom_hline(yintercept=median(eu_comparisson$value, na.rm=T) ) +
labs(
title="BelgiÃ« koploper in w-europa ondanks hoge vaccinatiegraad",
subtitle="Ziekenhuisopnames in week 41 tegenover aandeel inwoners dat volledig werd gevaccineerd",
x="% inwoners boosted",
y="ziekenhuisopnames per 100k inw. (logaritmisch)",
caption="Bron: ECDC"
) +
theme_minimal()
export_eu_comparisson <- eu_comparisson %>%
select(country = location, people_fully_vaccinated_per_hundred, perc_boosted, hospitalisation = value, inf_incidence = sum_7d_pop ) %>%
filter(!is.na(hospitalisation ))  %>%
filter(hospitalisation > 0)
export_eu_comparisson %>%
write_csv("../dist/csv/eu_comparisson.csv")
owid_stringency <- owid_all %>%
select(date, location, stringency_index) %>%
filter(location %in% eu28_countries) %>%
filter(date >= ymd("2021-10-01")) %>%
mutate(
#stringency_cat = as.character(ceiling(stringency_index / 20)),
date = ymd(date)
)
infections_for_stringency <- data_by_country %>%
filter(category == "infected") %>%
select(country, date, Infections = sum_7d_pop)
sortlist <- owid_stringency %>%
ungroup() %>%
filter(!is.na(stringency_index)) %>%
filter(location %in% c( "Denmark", "Ireland", "Netherlands", "France", "Belgium", "United Kingdom") ) %>%
group_by(location) %>%
filter(date == max(date)) %>%
arrange(desc(stringency_index))
stringency_plot <- owid_stringency %>%
left_join(infections_for_stringency, by=c("date", "location" =  "country")) %>%
filter(location %in% c( "Denmark", "Ireland", "Netherlands", "France", "Belgium", "United Kingdom") ) %>%
gather("category", "value", -c(location, date)) %>%
mutate(
location = factor(location, levels=sortlist$location)
) %>%
ggplot(aes(x=ymd(date), y=value)) +
geom_line() +
facet_grid(rows=vars(category), cols=vars(location), scales="free_y") +
theme_minimal()
ggsave(plot=stringency_plot, filename="stringency_plot.pdf", device="pdf")
stringency_plot
View(ecdc_subregional_og)
df_plot <- calendar %>%
mutate(
Date = as.Date(Date, "%d/%m"), category = ifelse(Race %in% voorjaarskoersen, "voorjaarskoers", "andere")) %>%
group_by(id, name, category) %>%
summarise(
nRaces = n(),
value = mean(value)
) %>%
spread(category, nRaces) %>%
ungroup() %>%
mutate(
totaal = voorjaarskoers + andere,
voorjaarskoers = jitter(voorjaarskoers, amount = 0.2),
totaal = jitter(totaal, amount = 0.2)
) %>%
filter(voorjaarskoers > 0)
df_plot %>%
ggplot(aes(x = voorjaarskoers, y = value)) +
geom_point(colour = "red", alpha = 0.6) +
geom_hline(yintercept = median(df_plot$value, na.rm = T)) +
geom_vline(xintercept = median(df_plot$voorjaarskoers, na.rm = T)) +
gghighlight(id %in% team_damiaan) +
ggrepel::geom_text_repel(data = subset(df_plot, id %in% team_damiaan), aes(label = name), size = 2)
View(df_plot)
View(df_plot)
df_plot <- calendar %>%
mutate(
Date = as.Date(Date, "%d/%m"), category = ifelse(Race %in% voorjaarskoersen, "voorjaarskoers", "andere")) %>%
group_by(id, name, category) %>%
summarise(
nRaces = n(),
value = mean(value)
) %>%
spread(category, nRaces) %>%
ungroup() %>%
mutate(
totaal = voorjaarskoers + andere,
voorjaarskoers = jitter(voorjaarskoers, amount = 0.2),
totaal = jitter(totaal, amount = 0.2)
) %>%
filter(voorjaarskoers > 0)
df_plot %>%
ggplot(aes(x = voorjaarskoers, y = value)) +
geom_point(colour = "red", alpha = 0.6) +
geom_hline(yintercept = median(df_plot$value, na.rm = T)) +
geom_vline(xintercept = median(df_plot$voorjaarskoers, na.rm = T)) +
gghighlight(id %in% team_damiaan) +
ggrepel::geom_text_repel(data = subset(df_plot, id %in% team_damiaan), aes(label = name), size = 2)
View(df_plot)
df_plot <- calendar %>%
mutate(
Date = as.Date(Date, "%d/%m"), category = ifelse(Race %in% voorjaarskoersen, "voorjaarskoers", "andere")) %>%
group_by(id, name, category) %>%
summarise(
nRaces = n(),
value = mean(value)
)
View(df_plot)
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
View(df_gas_storage)
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
gas_price %>%
mutate(ra7_price = runMean(price, 7)) %>%
filter(date >= "2021-01-01") %>%
ggplot(aes(x = date, y = price)) +
# geom_area(alpha = 0.4) +
# geom_line() +
geom_point(size = 0.2) +
geom_line(aes(y = ra7_price), colour = "red") +
scale_y_continuous(limits = c(0,200), expand = c(0,0))
gas_price %>%
mutate(ra7_price = runMean(price, 7)) %>%
filter(date >= "2021-01-01") %>%
ggplot(aes(x = date, y = price)) +
# geom_area(alpha = 0.4) +
# geom_line() +
geom_point(size = 0.2) +
geom_line(aes(y = ra7_price), colour = "red") +
scale_y_continuous(limits = c(0,200), expand = c(0,0))
gas_price %>%
mutate(ra7_price = runMean(price, 7)) %>%
filter(date >= "2021-01-01") %>%
ggplot(aes(x = date, y = price)) +
geom_point(size = 0.2) +
geom_line(aes(y = ra7_price), colour = "red") +
scale_y_continuous(limits = c(0,200), expand = c(0,0))
gas_price %>%
mutate(ra7_price = runMean(price, 7)) %>%
filter(date >= "2021-01-01") %>%
ggplot(aes(x = date, y = price)) +
geom_line(size = 0.2) +
geom_line(aes(y = ra7_price), colour = "red") +
scale_y_continuous(limits = c(0,200), expand = c(0,0))
View(gas_price)
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json")
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.Date(Date))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXlt(Date))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date)) %>%
ggplot(aes(x = Date, y = Open))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date)) %>%
ggplot(aes(x = Date, y = Open)) +
geom_line()
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date)) %>%
ggplot(aes(x = Date, y = Open, colour = Symbol)) +
geom_line()
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json") %>%
mutate(Date = as.POSIXct(Date))
fromJSON("https://api.tradingeconomics.com/markets/intraday/ngeu:com?c=guest:guest&f=json")
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
gas_price %>%
arrange(desc(date)) %>%
write_csv("../webpage/src/data/gas_price.csv")
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, country_name_nl, gasDayStartedOn, plot_date, year, full, full_avg, full_min, full_max, gasInStorage, currentLevel, diff) %>%
filter(country == "EU")
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, country_name_nl, gasDayStartedOn, plot_date, year, full, full_avg, full_min, full_max, gasInStorage, currentLevel, diff) %>%
filter(country == "EU") %>%
arrange(-year, currentLevel, desc(plot_date)) %>%
write_csv("../webpage/src/data/storage_levels.csv")
### ua physical flow
ua_gas_physical %>%
mutate(
date = ymd(date),
date_floor = floor_date(date, "1 day")
) %>%
filter(direction == "Entry" & group == "Cross-border points" & country == "Russia") %>%
group_by(date_floor, country, group, direction) %>%
summarise(
volume_mln_m3 = sum(volume_cm, na.rm = T) / 1000000
) %>%
filter(date_floor >= "2021-12-01") %>%
write_csv("../webpage/src/data/ua_phys_flow.csv")
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, plot_date, year, full, full_avg, full_min, full_max) %>%
filter(country == "EU") %>%
spread(year, full)
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, plot_date, year, full, full_avg, full_min, full_max) %>%
filter(country == "EU") %>%
spread(year, full) %>%
arrange(-year, currentLevel, desc(plot_date)) %>%
write_csv("../webpage/src/data/storage_levels.csv")
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, plot_date, year, full, full_avg, full_min, full_max) %>%
filter(country == "EU") %>%
spread(year, full) %>%
write_csv("../webpage/src/data/storage_levels.csv")
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, plot_date, year, full, full_avg, full_min, full_max) %>%
filter(country == "EU") %>%
mutate(
full = full * 100,
full_avg = full_avg * 100,
full_min = full_min * 100,
full_max = full_max * 100
) %>%
spread(year, full) %>%
write_csv("../webpage/src/data/storage_levels.csv")
df_gas_dependency <- readxl::read_xlsx("data/gas-dependency.xlsx") %>%
gather("category","dep_perc", -country_name)
## bind storage and dependency df together
df_gas_dependency <- df_gas_storage %>%
group_by(country) %>%
filter(gasDayStartedOn == max(gasDayStartedOn)) %>%
left_join(df_gas_dependency %>% filter(category == "Natural Gas"), by = c("country_name")) %>%
filter(!is.na(dep_perc))
View(df_gas_dependency)
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28") %>%
select(country, country_name_nl, gasDayStartedOn, plot_date, year, full, full_avg, full_min, full_max, gasInStorage, currentLevel, diff) %>%
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(country, country_name_nl, gasDayStartedOn, plot_date, year, full, full_avg, full_min, full_max, gasInStorage, currentLevel, diff)
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(country, country_name_nl, gasDayStartedOn, plot_date, year, full, full_avg, full_min, full_max, gasInStorage, currentLevel, diff) %>%
ggplot(aes(x = gasDayStartedOn, y = full)) +
geom_line()
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, full)
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage)
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
gather("category", "value", -date)
gas_scenarios
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage) %>%
`colnames<-`(c("date","value")) %>%
mutate(category = "current gas in storage")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
gather("category", "value", -date) %>%
bind_rows(current_eu_gas)
gas_scenarios
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage) %>%
`colnames<-`(c("date","value")) %>%
mutate(category = "current gas in storage")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
gather("category", "value", -date) %>%
bind_rows(current_eu_gas)
gas_scenarios %>%
spread(category, value)
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage) %>%
`colnames<-`(c("date","value")) %>%
mutate(category = "current gas in storage")
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
source("~/Documents/2022/00_gas-shortage-eu/analysis/loadGasData.R", echo=TRUE)
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage) %>%
`colnames<-`(c("date","value")) %>%
mutate(category = "current gas in storage")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
gather("category", "value", -date) %>%
bind_rows(current_eu_gas)
gas_scenarios %>%
spread(category, value)
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage) %>%
`colnames<-`(c("date","value")) %>%
mutate(category = "current gas in storage")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
gather("category", "value", -date) %>%
bind_rows(current_eu_gas)
gas_scenarios %>%
spread(category, value) %>%
write_csv("dw-scenarios.csv")
df_avg_gas <- df_gas_storage %>%
distinct(plot_date, full_avg, full_max, full_min)
View(df_avg_gas)
df_avg_gas <- df_gas_storage %>%
filter(country == "EU")
df_avg_gas <- df_gas_storage %>%
filter(country == "EU") %>%
distinct(plot_date, full_avg, full_max, full_min)
View(df_avg_gas)
gas_scenarios %>%
spread(category, value) %>%
left_join(df_avg_gas, by = c("date"="plot_date"))
gas_scenarios %>%
mutate(plot_date = as.Date(paste0("2021-", format(gasDayStartedOn,"%m-%d")))) %>%
spread(category, value) %>%
left_join(df_avg_gas, by = c("plot_date"))
gas_scenarios %>%
mutate(plot_date = as.Date(paste0("2021-", format(date,"%m-%d")))) %>%
spread(category, value) %>%
left_join(df_avg_gas, by = c("plot_date"))
gas_scenarios %>%
mutate(plot_date = as.Date(paste0("2021-", format(date,"%m-%d")))) %>%
spread(category, value) %>%
left_join(df_avg_gas, by = c("plot_date")) %>%
write_csv("dw-scenarios.csv")
df_avg_gas <- df_gas_storage %>%
filter(country == "EU" & year >= 2015) %>%
group_by(plot_date) %>%
summarise(
full_avg = mean(gasInStorage[year <= 2020], na.rm =T),
full_min = min(gasInStorage[year <= 2020], na.rm =T),
full_max = max(gasInStorage[year <= 2020], na.rm =T),
)
current_eu_gas <- df_gas_storage %>%
filter(year>=2021 & !is.na(full) & plot_date != "2021-02-28" & country == "EU") %>%
select(gasDayStartedOn, gasInStorage) %>%
`colnames<-`(c("date","value")) %>%
mutate(category = "current gas in storage")
gas_scenarios <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1NCsJfWW60_nFK3KuM34JVYoQykVLZNrOGpCHkVgnNUE/edit#gid=0") %>%
gather("category", "value", -date) %>%
bind_rows(current_eu_gas)
gas_scenarios %>%
mutate(plot_date = as.Date(paste0("2021-", format(date,"%m-%d")))) %>%
spread(category, value) %>%
left_join(df_avg_gas, by = c("plot_date")) %>%
write_csv("dw-scenarios.csv")
gas_import <- eurostat::get_eurostat("NRG_TI_GAS")
library(eurostat)
library(eurostat)
install.packages("eurostat")
gas_import <- eurostat::get_eurostat("NRG_TI_GAS")
library(eurostat)
gas_import <- read_csv("data/nrg_ti_gas_linear.csv")
View(gas_import)
52463.57/80439.02
46249.99/94786.76
